name: "Check Build"
on:
  pull_request:
  push:
    branches:
      - master
      - develop
jobs:
  check-emacs:
    name: Flake Check emacs (x86_64 only)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0
    - uses: cachix/install-nix-action@v17
      with:
        extra_nix_config: |
          extra-substituters = https://nix-community.cachix.org
          extra-trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
    - name: Retrieve /nix/store archive
      uses: actions/cache@v3
      id: cache-nix-store
      with:
        path: nix-store.dump
        key: nix-store-${{ hashFiles('flake.*') }}
        restore-keys: |
          nix-store-
    - name: Import /nix/store contents
      if: ${{ steps.cache-nix-store.outputs.cache-hit }}
      run: |
        if [[ -f nix-store.dump ]]; then
          nix-store --import < nix-store.dump || true
          rm nix-store.dump
        fi
    - name: Run checks in emacs
      run: |
        nix build .#checks.x86_64-linux.init-example-el
    - name: Export /nix/store contents
      if: ${{ !steps.cache-nix-store.outputs.cache-hit }}
      run: |
        nix-store --export $(nix-store -qR /nix/store/*-doom-emacs) > nix-store.dump
  check-emacsGit:
    name: Flake Check emacsGit (x86_64 only)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0
    - uses: cachix/install-nix-action@v17
      with:
        name: nix-community
    - name: Retrieve /nix/store archive
      uses: actions/cache@v3
      id: cache-nix-store-emacsGit
      with:
        path: nix-store.dump
        key: nix-store-emacsGit-${{ hashFiles('flake.*') }}
        restore-keys: |
          nix-store-emacsGit-
    - name: Import /nix/store contents
      if: ${{ steps.cache-nix-store-emacsGit.outputs.cache-hit }}
      run: |
        if [[ -f nix-store.dump ]]; then
          nix-store --import < nix-store.dump || true
          rm nix-store.dump
        fi
    - name: Run checks in emacsGit
      run: |
        nix build .#checks.x86_64-linux.init-example-el-emacsGit
    - name: Export /nix/store contents
      if: ${{ !steps.cache-nix-store-emacsGit.outputs.cache-hit }}
      run: |
        nix-store --export $(nix-store -qR /nix/store/*-doom-emacs) > nix-store.dump
